#!/usr/bin/env python3
"""
Script de configura√ß√£o inicial para o Lab 02
An√°lise de Qualidade de Reposit√≥rios Java
"""

import os
import sys
import subprocess
import requests
from pathlib import Path

def check_python_version():
    """Verifica se a vers√£o do Python √© adequada."""
    print("üêç Verificando vers√£o do Python...")
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} OK")
    return True

def check_git():
    """Verifica se o Git est√° instalado."""
    print("üì¶ Verificando Git...")
    try:
        result = subprocess.run(['git', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Git OK: {result.stdout.strip()}")
            return True
    except FileNotFoundError:
        pass
    
    print("‚ùå Git n√£o encontrado")
    print("   Instale em: https://git-scm.com/download")
    return False

def check_java():
    """Verifica se o Java est√° instalado."""
    print("‚òï Verificando Java...")
    try:
        result = subprocess.run(['java', '-version'], capture_output=True, text=True)
        if result.returncode == 0:
            version_line = result.stderr.split('\n')[0]
            print(f"‚úÖ Java OK: {version_line}")
            return True
    except FileNotFoundError:
        pass
    
    print("‚ùå Java n√£o encontrado")
    print("   Instale em: https://www.oracle.com/java/technologies/downloads/")
    return False

def install_python_dependencies():
    """Instala as depend√™ncias Python."""
    print("üìö Instalando depend√™ncias Python...")
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], check=True)
        print("‚úÖ Depend√™ncias instaladas com sucesso")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar depend√™ncias")
        return False

def setup_ck_tool():
    """Configura a ferramenta CK se n√£o estiver presente."""
    print("üîß Verificando ferramenta CK...")
    
    # Verificar se CK j√° existe
    default_ck_path = r"C:\Users\Nery\Desktop\ck\target\ck-0.7.1-SNAPSHOT-jar-with-dependencies.jar"
    if os.path.exists(default_ck_path):
        print(f"‚úÖ CK encontrada em: {default_ck_path}")
        return True
    
    # Procurar CK em outros locais comuns
    possible_paths = [
        "ck/target/ck-*-jar-with-dependencies.jar",
        "../ck/target/ck-*-jar-with-dependencies.jar",
        "~/ck/target/ck-*-jar-with-dependencies.jar"
    ]
    
    for path_pattern in possible_paths:
        import glob
        matches = glob.glob(os.path.expanduser(path_pattern))
        if matches:
            print(f"‚úÖ CK encontrada em: {matches[0]}")
            return True
    
    print("‚ö†Ô∏è  Ferramenta CK n√£o encontrada")
    print("üìã Para instalar a ferramenta CK:")
    print("   1. git clone https://github.com/mauricioaniche/ck")
    print("   2. cd ck")
    print("   3. mvn clean package")
    print("   4. O JAR estar√° em target/")
    
    setup_ck = input("\n‚ùì Deseja que eu tente baixar e compilar a CK? (s/N): ").lower().strip()
    
    if setup_ck == 's':
        try:
            print("üì¶ Clonando reposit√≥rio CK...")
            subprocess.run(['git', 'clone', 'https://github.com/mauricioaniche/ck'], check=True)
            
            print("üî® Compilando CK (isso pode demorar)...")
            subprocess.run(['mvn', 'clean', 'package'], cwd='ck', check=True)
            
            print("‚úÖ CK compilada com sucesso!")
            return True
            
        except subprocess.CalledProcessError:
            print("‚ùå Erro ao configurar CK automaticamente")
            print("   Configure manualmente seguindo as instru√ß√µes acima")
            return False
        except FileNotFoundError:
            print("‚ùå Maven n√£o encontrado")
            print("   Instale Maven: https://maven.apache.org/install.html")
            return False
    
    return False

def setup_github_token():
    """Configura o token do GitHub."""
    print("üîë Configurando token do GitHub...")
    
    env_file = Path('src/.env')
    if env_file.exists():
        with open(env_file, 'r') as f:
            content = f.read()
            if 'your_github_token_here' not in content:
                print("‚úÖ Token do GitHub j√° configurado")
                return True
    
    print("üìã Para continuar, voc√™ precisa de um token do GitHub:")
    print("   1. Acesse: https://github.com/settings/tokens")
    print("   2. Clique em 'Generate new token (classic)'")
    print("   3. Selecione escopo 'public_repo'")
    print("   4. Copie o token gerado")
    
    token = input("\nüîë Cole seu token do GitHub aqui: ").strip()
    
    if not token:
        print("‚ùå Token n√£o fornecido")
        return False
    
    # Testar token
    print("üîç Testando token...")
    headers = {'Authorization': f'token {token}'}
    response = requests.get('https://api.github.com/user', headers=headers)
    
    if response.status_code == 200:
        print("‚úÖ Token v√°lido!")
        
        # Salvar no arquivo .env
        env_content = f"GITHUB_TOKEN={token}\nPROJECT_NAME=java-quality-analysis\nOUTPUT_DIR=output\n"
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print(f"üíæ Token salvo em: {env_file}")
        return True
    else:
        print(f"‚ùå Token inv√°lido: {response.status_code}")
        return False

def create_directories():
    """Cria os diret√≥rios necess√°rios."""
    print("üìÅ Criando estrutura de diret√≥rios...")
    
    directories = [
        'src/output/data',
        'src/output/plots',
        'temp_repos'
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
    
    print("‚úÖ Diret√≥rios criados")

def run_test():
    """Executa um teste b√°sico."""
    print("üß™ Executando teste b√°sico...")
    
    try:
        os.chdir('src')
        result = subprocess.run([sys.executable, 'main.py'], timeout=300, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Teste b√°sico passou!")
            return True
        else:
            print(f"‚ùå Teste falhou: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚è±Ô∏è  Teste demorou muito (timeout 5 minutos)")
        return False
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False
    finally:
        os.chdir('..')

def main():
    """Fun√ß√£o principal do setup."""
    print("üöÄ SETUP - Lab 02: An√°lise de Qualidade de Reposit√≥rios Java")
    print("="*60)
    
    checks = [
        ("Python", check_python_version),
        ("Git", check_git),
        ("Java", check_java),
        ("Depend√™ncias Python", install_python_dependencies),
        ("Ferramenta CK", setup_ck_tool),
        ("Token GitHub", setup_github_token),
        ("Diret√≥rios", create_directories),
    ]
    
    failed_checks = []
    
    for name, check_func in checks:
        try:
            if not check_func():
                failed_checks.append(name)
        except Exception as e:
            print(f"‚ùå Erro em {name}: {e}")
            failed_checks.append(name)
        print()
    
    print("="*60)
    
    if failed_checks:
        print("‚ùå SETUP INCOMPLETO")
        print("Itens que precisam de aten√ß√£o:")
        for item in failed_checks:
            print(f"   ‚Ä¢ {item}")
        print("\nResolva os problemas acima e execute o setup novamente.")
    else:
        print("‚úÖ SETUP CONCLU√çDO COM SUCESSO!")
        print("\nüéØ PR√ìXIMOS PASSOS:")
        print("   1. cd src")
        print("   2. python main.py        # Teste com 1 reposit√≥rio")
        print("   3. python main.py --full # Coleta completa (1.000 repos)")
        
        run_test_now = input("\n‚ùì Executar teste agora? (s/N): ").lower().strip()
        if run_test_now == 's':
            run_test()

if __name__ == "__main__":
    main()
